// <auto-generated />
using System;
using DAL.Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(CannabisAccessorriesDBContext))]
    partial class CannabisAccessorriesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Road_Village_Hamlet")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DAL.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(MAX)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands", "Products");
                });

            modelBuilder.Entity("DAL.Entities.Breeder", b =>
                {
                    b.Property<int>("BreederId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreederId"));

                    b.Property<string>("BreederName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("BreederId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_BREEDER_EMAIL");

                    b.ToTable("Breeders");
                });

            modelBuilder.Entity("DAL.Entities.CarbonFilter", b =>
                {
                    b.Property<int>("CarbonFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarbonFilterId"));

                    b.Property<int>("AirflowRate")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CarbonFilterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<decimal>("Diameter")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("FilterMaterial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Length")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("Lifespan")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxTemperature")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal>("MinTemperature")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.HasKey("CarbonFilterId");

                    b.HasIndex("BrandId");

                    b.ToTable("CarbonFilters", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_Added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Session_Id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Total_Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("CartStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartDetailsId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.CartStatus", b =>
                {
                    b.Property<int>("CartSatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartSatusId"));

                    b.Property<string>("CartSatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CartSatusId");

                    b.ToTable("CartSatus", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_CATEGORY_CATEGORYNAME");

                    b.ToTable("Categories", "Products");
                });

            modelBuilder.Entity("DAL.Entities.ChipModel", b =>
                {
                    b.Property<int>("ChipModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChipModelId"));

                    b.Property<decimal>("Efficiency")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2");

                    b.Property<int>("Generation")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelChip")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChipModelId");

                    b.ToTable("ChipModels", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassificationId"));

                    b.Property<string>("ClassificationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ClassificationId");

                    b.ToTable("Classifies");
                });

            modelBuilder.Entity("DAL.Entities.CoolingSystem", b =>
                {
                    b.Property<int>("CoolingSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoolingSystemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CoolingSystemId");

                    b.ToTable("CoolingSystems", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Is_anonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenExpiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_CUSTOMER_EMAIL)");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_CUSTOMER_USERNAME");

                    b.ToTable("Customers", "Users");
                });

            modelBuilder.Entity("DAL.Entities.Dehumidifier", b =>
                {
                    b.Property<int>("DehumidifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DehumidifierId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<decimal>("CoverageArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2");

                    b.Property<decimal>("DehumidificationCapacity")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(3,2");

                    b.Property<string>("DehumidifierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("NoiseLevel")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2");

                    b.Property<decimal>("PowerConsumption")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DehumidifierId");

                    b.HasIndex("BrandId");

                    b.ToTable("Dehumidifiers", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.GrowLight", b =>
                {
                    b.Property<int>("GrowLightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GrowLightId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ChipModelId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingSystemId")
                        .HasColumnType("int");

                    b.Property<int>("CoverageArea")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.Property<int>("Lifespan")
                        .HasColumnType("int");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SpectrumId")
                        .HasColumnType("int");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.Property<int>("Wattage")
                        .HasPrecision(10, 2)
                        .HasColumnType("int");

                    b.HasKey("GrowLightId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChipModelId");

                    b.HasIndex("CoolingSystemId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("SpectrumId");

                    b.ToTable("GrowLights", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.GrowTent", b =>
                {
                    b.Property<int>("GrowtentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GrowtentId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FrameMaterial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("Waterproof")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("GrowtentId");

                    b.HasIndex("BrandId");

                    b.ToTable("GrowTents", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(TEXT)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("SellerId");

                    b.ToTable("Logs", "Logs");
                });

            modelBuilder.Entity("DAL.Entities.Nutrient", b =>
                {
                    b.Property<int>("NutrientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutrientId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsOrganic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NpkRatio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NutrientTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageInstructions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VolumeMl")
                        .HasColumnType("int");

                    b.HasKey("NutrientId");

                    b.HasIndex("BrandId");

                    b.HasIndex("NutrientTypeId");

                    b.ToTable("Nutrients", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.NutrientType", b =>
                {
                    b.Property<int>("NutrientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutrientTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(TEXT)");

                    b.Property<string>("NutrientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("NutrientTypeId");

                    b.ToTable("NutrientTypes", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderSatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments", "Orders");
                });

            modelBuilder.Entity("DAL.Entities.PowerSupply", b =>
                {
                    b.Property<int>("PowerSupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PowerSupplyId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Voltage")
                        .HasColumnType("int");

                    b.HasKey("PowerSupplyId");

                    b.ToTable("PowerSupplies", "lighting");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId")
                        .IsUnique();

                    b.ToTable("Products", "Products");
                });

            modelBuilder.Entity("DAL.Entities.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", "Products");
                });

            modelBuilder.Entity("DAL.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaximumDiscountValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("MinimumOrderValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("int");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdateAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions", "Promotions");
                });

            modelBuilder.Entity("DAL.Entities.PromotionCategory", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Promotion_Category", "Promotions");
                });

            modelBuilder.Entity("DAL.Entities.PromotionProduct", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Promotion_Produc", "Promotions");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Customerid")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReviewId");

                    b.HasIndex("Customerid");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", "Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "Rating BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", "Users");
                });

            modelBuilder.Entity("DAL.Entities.Seed", b =>
                {
                    b.Property<int>("SeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeedId"));

                    b.Property<int>("BreederId")
                        .HasColumnType("int");

                    b.Property<string>("CBDContent")
                        .IsRequired()
                        .HasPrecision(5, 2)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ClassifyId")
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FloweringTimeDays")
                        .HasColumnType("INT");

                    b.Property<decimal>("IndicaPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("SativaPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("StrainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("THCContent")
                        .IsRequired()
                        .HasPrecision(5, 2)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("INT");

                    b.Property<decimal>("Yield")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("SeedId");

                    b.HasIndex("BreederId");

                    b.HasIndex("ClassifyId");

                    b.ToTable("Seeds", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Satus")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SellerId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_SEELER_EMAIL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_SEELER_USERNAME");

                    b.ToTable("Sellers", "Users");
                });

            modelBuilder.Entity("DAL.Entities.ShippingMethod", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingId"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EstimatedDeliveryDate")
                        .HasColumnType("INT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ShippingId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ShippingMethod", "Oders");
                });

            modelBuilder.Entity("DAL.Entities.Spectrum", b =>
                {
                    b.Property<int>("SpectrumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpectrumId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SpectrumId");

                    b.ToTable("Spectrums", "Inventory");
                });

            modelBuilder.Entity("DAL.Entities.Address", b =>
                {
                    b.HasOne("DAL.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ADRESS_CUSTOMER_CUSTOMERID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DAL.Entities.CarbonFilter", b =>
                {
                    b.HasOne("DAL.Entities.Brand", "Brand")
                        .WithMany("CarbonFilters")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARBONFILTER_BRAND_CARBONFILTERID");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.HasOne("DAL.Entities.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("DAL.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CART_CUSTOMER_CUSTOMERID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DAL.Entities.CartDetails", b =>
                {
                    b.HasOne("DAL.Entities.CartStatus", "CartStatus")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARTDETAILS_CARTSTATUS_CARTSTATUSID");

                    b.HasOne("DAL.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARTDETAILS_CART_CARTID");

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany("CartsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARTDETAILS_PRODUCT_PRODUCTID");

                    b.Navigation("Cart");

                    b.Navigation("CartStatus");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Dehumidifier", b =>
                {
                    b.HasOne("DAL.Entities.Brand", "Brand")
                        .WithMany("Dehumidifiers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DEHUMIDIFIERS_BRAND");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DAL.Entities.GrowLight", b =>
                {
                    b.HasOne("DAL.Entities.Brand", "Brand")
                        .WithMany("GrowLights")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_BRAND_BRANDID");

                    b.HasOne("DAL.Entities.ChipModel", "ChipModel")
                        .WithMany("GrowLights")
                        .HasForeignKey("ChipModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_CHIPMODEL_CHIPMODELID");

                    b.HasOne("DAL.Entities.CoolingSystem", "CoolingSystem")
                        .WithMany("GrowLights")
                        .HasForeignKey("CoolingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_COOLINGSYSTEM_COOLINGSYSTEMID");

                    b.HasOne("DAL.Entities.PowerSupply", "PowerSupply")
                        .WithMany("GrowLights")
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_POWERSUPPLY_POWERSUPPLYID");

                    b.HasOne("DAL.Entities.Spectrum", "Spectrum")
                        .WithMany("GrowLights")
                        .HasForeignKey("SpectrumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_SPECTRUM_SPECTRUMID");

                    b.Navigation("Brand");

                    b.Navigation("ChipModel");

                    b.Navigation("CoolingSystem");

                    b.Navigation("PowerSupply");

                    b.Navigation("Spectrum");
                });

            modelBuilder.Entity("DAL.Entities.GrowTent", b =>
                {
                    b.HasOne("DAL.Entities.Brand", "Brand")
                        .WithMany("GrowTents")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWTENT_BRAND_BRANDID");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DAL.Entities.Log", b =>
                {
                    b.HasOne("DAL.Entities.Seller", "Seller")
                        .WithMany("Logs")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LOG_SELLER_SELLERID");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DAL.Entities.Nutrient", b =>
                {
                    b.HasOne("DAL.Entities.Brand", "Brand")
                        .WithMany("Nutrients")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NUTRIENT_BRAND_BRANDID");

                    b.HasOne("DAL.Entities.NutrientType", "NutrientType")
                        .WithMany("Nutrients")
                        .HasForeignKey("NutrientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NUTRIENT_NUTRIENTTYPE_NUTRIENTTYPEID");

                    b.Navigation("Brand");

                    b.Navigation("NutrientType");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_CUSTOMER_CUSTOMERID");

                    b.HasOne("DAL.Entities.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_SELLER_SELLERID");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Oder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ODERITEM_ODER");

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany("OderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ODERITEM_PRODUCT");

                    b.Navigation("Oder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("DAL.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PAYMENT_ORDER_ORDERID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCT_CATEGORY_CATEGORYID");

                    b.HasOne("DAL.Entities.CarbonFilter", "CarbonFilter")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CARBONFILTER_PRODUCT_PRODUCTTYPEID");

                    b.HasOne("DAL.Entities.Dehumidifier", "Dehumidifier")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DEHUMIDIFIER_PRODUCT_PRODUCTTYPEID");

                    b.HasOne("DAL.Entities.GrowLight", "GrowLight")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWLIGHT_PRODUCT_PRODUCTTYPEID");

                    b.HasOne("DAL.Entities.GrowTent", "GrowTent")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROWTENT_PRODUCT_PRODUCTTYPEID");

                    b.HasOne("DAL.Entities.Nutrient", "Nutrient")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NUTRIENT_PRODUCT_PRODUCTTYPEID");

                    b.HasOne("DAL.Entities.Seed", "Seed")
                        .WithOne("Product")
                        .HasForeignKey("DAL.Entities.Product", "ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SEED_PRODUCT_PRODUCTTYPEID");

                    b.Navigation("CarbonFilter");

                    b.Navigation("Category");

                    b.Navigation("Dehumidifier");

                    b.Navigation("GrowLight");

                    b.Navigation("GrowTent");

                    b.Navigation("Nutrient");

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("DAL.Entities.ProductImage", b =>
                {
                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCTIMAGE_PRODUCT_PRODUCTID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.PromotionCategory", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("PromotionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTIONCATEGORY_CATEGORY_CATEGORYID");

                    b.HasOne("DAL.Entities.Promotion", "Promotion")
                        .WithMany("PromotionCategories")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTIONCATEGORY_PROMOTION_PROMOTIONID");

                    b.Navigation("Category");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DAL.Entities.PromotionProduct", b =>
                {
                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTIONPRODUCT_PRODUCT_PRODUCTID");

                    b.HasOne("DAL.Entities.Promotion", "Promotion")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTIONPRODUCT_PROMOTION_PROMOTIONID");

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DAL.Entities.Review", b =>
                {
                    b.HasOne("DAL.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("Customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REVIEW_CUSTOMER_CUSTOMERID");

                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REVIEW_ORDER_ORDERID");

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_REVIEW_PRODUCT_PRODUCTID");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Seed", b =>
                {
                    b.HasOne("DAL.Entities.Breeder", "Breeder")
                        .WithMany("Seeds")
                        .HasForeignKey("BreederId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Classification", "Classification")
                        .WithMany("Seeds")
                        .HasForeignKey("ClassifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SEED_CLASSIFICATION_CLASSIFYID");

                    b.Navigation("Breeder");

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("DAL.Entities.Seller", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Sellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SELLER_ROLE_ROLEID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.ShippingMethod", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithOne("ShippingMethod")
                        .HasForeignKey("DAL.Entities.ShippingMethod", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SHIPPINGMETHOD_ORDER_ORDERID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Entities.Brand", b =>
                {
                    b.Navigation("CarbonFilters");

                    b.Navigation("Dehumidifiers");

                    b.Navigation("GrowLights");

                    b.Navigation("GrowTents");

                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("DAL.Entities.Breeder", b =>
                {
                    b.Navigation("Seeds");
                });

            modelBuilder.Entity("DAL.Entities.CarbonFilter", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("DAL.Entities.CartStatus", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PromotionCategories");
                });

            modelBuilder.Entity("DAL.Entities.ChipModel", b =>
                {
                    b.Navigation("GrowLights");
                });

            modelBuilder.Entity("DAL.Entities.Classification", b =>
                {
                    b.Navigation("Seeds");
                });

            modelBuilder.Entity("DAL.Entities.CoolingSystem", b =>
                {
                    b.Navigation("GrowLights");
                });

            modelBuilder.Entity("DAL.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Entities.Dehumidifier", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.GrowLight", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.GrowTent", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Nutrient", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.NutrientType", b =>
                {
                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("ShippingMethod")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.PowerSupply", b =>
                {
                    b.Navigation("GrowLights");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.Navigation("CartsDetails");

                    b.Navigation("OderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("PromotionProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Entities.Promotion", b =>
                {
                    b.Navigation("PromotionCategories");

                    b.Navigation("PromotionProducts");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("DAL.Entities.Seed", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Seller", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Spectrum", b =>
                {
                    b.Navigation("GrowLights");
                });
#pragma warning restore 612, 618
        }
    }
}
